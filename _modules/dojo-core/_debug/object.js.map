{"version":3,"file":"object.js","sourceRoot":"","sources":["object.ts"],"names":["assign","is"],"mappings":";;;;;;;;IAIA,AAJA;;;OAGG;oBACoB,MAAW;QAAEA,iBAAiBA;aAAjBA,WAAiBA,CAAjBA,sBAAiBA,CAAjBA,IAAiBA;YAAjBA,gCAAiBA;;QACpDA,EAAEA,CAACA,CAACA,MAAMA,IAAIA,IAAIA,CAACA,CAACA,CAACA;YACpBA,MAAMA,IAAIA,SAASA,CAACA,yCAAyCA,CAACA,CAACA;QAChEA,CAACA;QAEDA,MAAMA,GAAGA,MAAMA,CAACA,MAAMA,CAACA,CAACA;QAExBA,GAAGA,CAACA,CAAeA,UAAOA,EAArBA,mBAAUA,EAAVA,IAAqBA,CAACA;YAAtBA,IAAIA,MAAMA,GAAIA,OAAOA,IAAXA;YACdA,EAAEA,CAACA,CAACA,MAAMA,CAACA,CAACA,CAACA;gBACZA,MAAMA,GAAGA,MAAMA,CAACA,MAAMA,CAACA,CAACA;gBACxBA,IAAMA,IAAIA,GAAGA,MAAMA,CAACA,IAAIA,CAACA,MAAMA,CAACA,CAACA;gBAEjCA,GAAGA,CAACA,CAAYA,UAAIA,EAAfA,gBAAOA,EAAPA,IAAeA,CAACA;oBAAhBA,IAAIA,GAAGA,GAAIA,IAAIA,IAARA;oBACXA,MAAMA,CAACA,GAAGA,CAACA,GAAGA,MAAMA,CAACA,GAAGA,CAACA,CAACA;iBAC1BA;YACFA,CAACA;SACDA;QACDA,MAAMA,CAACA,MAAMA,CAACA;IACfA,CAACA;IAlBe,cAAM,SAkBrB,CAAA;IAMD,AAJA;;;OAGG;gBACgB,MAAW,EAAE,MAAW;QAC1CC,EAAEA,CAACA,CAACA,MAAMA,KAAKA,MAAMA,CAACA,CAACA,CAACA;YACvBA,MAAMA,CAACA,MAAMA,KAAKA,CAACA,IAAIA,CAACA,GAAGA,MAAMA,KAAKA,CAACA,GAAGA,MAAMA,EAAEA,KAAKA;YAANA,JAClDA,CAACA;QACDA,MAAMA,CAACA,MAAMA,KAAKA,MAAMA,IAAIA,MAAMA,KAAKA,MAAMA,EAAEA,MAAMA;QAAPA,JAC/CA,CAACA;IALe,UAAE,KAKjB,CAAA","sourcesContent":["/**\n * Copies the values of all enumerable own properties of one or more source objects to the target object.\n * @return The modified target object\n */\nexport function assign(target: any, ...sources: any[]): any {\n\tif (target == null) {\n\t\tthrow new TypeError('Cannot convert first argument to object');\n\t}\n\n\ttarget = Object(target);\n\n\tfor (let source of sources) {\n\t\tif (source) {\n\t\t\tsource = Object(source);\n\t\t\tconst keys = Object.keys(source);\n\n\t\t\tfor (let key of keys) {\n\t\t\t\ttarget[key] = source[key];\n\t\t\t}\n\t\t}\n\t}\n\treturn target;\n}\n\n/**\n * Determines whether two values are the same value.\n * @return true if the values are the same; false otherwise\n */\nexport function is(value1: any, value2: any): boolean {\n\tif (value1 === value2) {\n\t\treturn value1 !== 0 || 1 / value1 === 1 / value2; // -0\n\t}\n\treturn value1 !== value1 && value2 !== value2; // NaN\n}\n"]}